
{
	Initialize "() {
AddToPluginsMenu('Print Cue Sheet','Run');

// The following enables the latest behavior for the ManuScript interpreter.
// If you intend your plugin to run on previous versions of Sibelius where that functionality
// didn't exist, you will likely have to revisit the following:
if (Sibelius.ProgramVersion > 20200600) {
    SetInterpreterOption(TreatSingleCharacterAsString);
    SetInterpreterOption(SupportHalfSemitonePitchValues);
} }"
	Run "() {
                score = Sibelius.ActiveScore;
                Trace(utils.ExtractFileName(score.FileName));
                
                pickup = False;
                sysstaff = score.SystemStaff;
                
                if (sysstaff.NthBar(1).Length != sysstaff.NthBar(2).Length) {
                    pickup = True;
                }


                Trace('Key:' & ' ' & sysstaff.InitialKeySignature.AsText);

                for each measure in sysstaff {
                    message = '';
                    
                    for each RehearsalMark elem in measure {
                        message = message & ' ' & elem.MarkAsText;
                    }

                    for each KeySignature elem in measure {
                        message = message & ' ' & elem.AsText;
                    }
                    
                    for each TimeSignature elem in measure {
                        message = message & ' ' & elem.Numerator & '/' & elem.Denominator;
                    }

                    for each Comment elem in measure {
                        message = message & ' ' & elem.Text;
                    }

                    for each SystemTextItem elem in measure {
                        if (elem.StyleAsText = 'Boxed system text' or elem.StyleAsText = 'Tempo' or elem.StyleAsText = 'Plain system text')  {
                            message = message & ' ' & elem.Text;
                        }
                    }

                    for each SpecialBarline elem in measure {
                        if (elem.BarlineType = 'StartRepeat' or elem.BarlineType = 'EndRepeat' or elem.BarlineType = 'Final') {
                            
                            linetype = utils.Replace(elem.BarlineType, 'Repeat', ' Repeat', True);
                            message = message & ' ' & linetype;                            
                        }
                    }
                    
                    if (message != '') {
                        barnum = measure.BarNumber;

                        if (pickup) {
                            barnum = barnum - 1;
                        }

                        Trace(barnum & ' ' & message);
                    }
                }
            }"
}
